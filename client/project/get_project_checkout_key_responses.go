// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// GetProjectCheckoutKeyReader is a Reader for the GetProjectCheckoutKey structure.
type GetProjectCheckoutKeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectCheckoutKeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectCheckoutKeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectCheckoutKeyBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetProjectCheckoutKeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProjectCheckoutKeyOK creates a GetProjectCheckoutKeyOK with default headers values
func NewGetProjectCheckoutKeyOK() *GetProjectCheckoutKeyOK {
	return &GetProjectCheckoutKeyOK{}
}

/*
GetProjectCheckoutKeyOK describes a response with status code 200, with default header values.

A project's checkout key
*/
type GetProjectCheckoutKeyOK struct {
	Payload *models.ProjectCheckoutKeyInfo
}

// IsSuccess returns true when this get project checkout key o k response has a 2xx status code
func (o *GetProjectCheckoutKeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project checkout key o k response has a 3xx status code
func (o *GetProjectCheckoutKeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project checkout key o k response has a 4xx status code
func (o *GetProjectCheckoutKeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project checkout key o k response has a 5xx status code
func (o *GetProjectCheckoutKeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project checkout key o k response a status code equal to that given
func (o *GetProjectCheckoutKeyOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetProjectCheckoutKeyOK) Error() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key/{fingerprint}][%d] getProjectCheckoutKeyOK  %+v", 200, o.Payload)
}

func (o *GetProjectCheckoutKeyOK) String() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key/{fingerprint}][%d] getProjectCheckoutKeyOK  %+v", 200, o.Payload)
}

func (o *GetProjectCheckoutKeyOK) GetPayload() *models.ProjectCheckoutKeyInfo {
	return o.Payload
}

func (o *GetProjectCheckoutKeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectCheckoutKeyInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectCheckoutKeyBadRequest creates a GetProjectCheckoutKeyBadRequest with default headers values
func NewGetProjectCheckoutKeyBadRequest() *GetProjectCheckoutKeyBadRequest {
	return &GetProjectCheckoutKeyBadRequest{}
}

/*
GetProjectCheckoutKeyBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type GetProjectCheckoutKeyBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this get project checkout key bad request response has a 2xx status code
func (o *GetProjectCheckoutKeyBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project checkout key bad request response has a 3xx status code
func (o *GetProjectCheckoutKeyBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project checkout key bad request response has a 4xx status code
func (o *GetProjectCheckoutKeyBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project checkout key bad request response has a 5xx status code
func (o *GetProjectCheckoutKeyBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project checkout key bad request response a status code equal to that given
func (o *GetProjectCheckoutKeyBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetProjectCheckoutKeyBadRequest) Error() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key/{fingerprint}][%d] getProjectCheckoutKeyBadRequest  %+v", 400, o.Payload)
}

func (o *GetProjectCheckoutKeyBadRequest) String() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key/{fingerprint}][%d] getProjectCheckoutKeyBadRequest  %+v", 400, o.Payload)
}

func (o *GetProjectCheckoutKeyBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *GetProjectCheckoutKeyBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectCheckoutKeyNotFound creates a GetProjectCheckoutKeyNotFound with default headers values
func NewGetProjectCheckoutKeyNotFound() *GetProjectCheckoutKeyNotFound {
	return &GetProjectCheckoutKeyNotFound{}
}

/*
GetProjectCheckoutKeyNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetProjectCheckoutKeyNotFound struct {
	Payload *models.Errored
}

// IsSuccess returns true when this get project checkout key not found response has a 2xx status code
func (o *GetProjectCheckoutKeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project checkout key not found response has a 3xx status code
func (o *GetProjectCheckoutKeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project checkout key not found response has a 4xx status code
func (o *GetProjectCheckoutKeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project checkout key not found response has a 5xx status code
func (o *GetProjectCheckoutKeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get project checkout key not found response a status code equal to that given
func (o *GetProjectCheckoutKeyNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetProjectCheckoutKeyNotFound) Error() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key/{fingerprint}][%d] getProjectCheckoutKeyNotFound  %+v", 404, o.Payload)
}

func (o *GetProjectCheckoutKeyNotFound) String() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key/{fingerprint}][%d] getProjectCheckoutKeyNotFound  %+v", 404, o.Payload)
}

func (o *GetProjectCheckoutKeyNotFound) GetPayload() *models.Errored {
	return o.Payload
}

func (o *GetProjectCheckoutKeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
