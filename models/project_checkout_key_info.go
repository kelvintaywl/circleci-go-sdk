// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectCheckoutKeyInfo project checkout key info
//
// swagger:model ProjectCheckoutKeyInfo
type ProjectCheckoutKeyInfo struct {

	// The date and time the webhook was created
	// Example: 2023-02-10T04:49:36.117Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"created_at,omitempty"`

	// An SSH key fingerprint
	Fingerprint string `json:"fingerprint,omitempty"`

	// A boolean value that indicates if this key is preferred.
	// Example: true
	Preferred *bool `json:"preferred,omitempty"`

	// A public SSH key
	PublicKey string `json:"public_key,omitempty"`

	// type
	// Example: deploy-key
	// Enum: [github-user-key deploy-key]
	Type string `json:"type,omitempty"`
}

// Validate validates this project checkout key info
func (m *ProjectCheckoutKeyInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectCheckoutKeyInfo) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("created_at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

var projectCheckoutKeyInfoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["github-user-key","deploy-key"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectCheckoutKeyInfoTypeTypePropEnum = append(projectCheckoutKeyInfoTypeTypePropEnum, v)
	}
}

const (

	// ProjectCheckoutKeyInfoTypeGithubDashUserDashKey captures enum value "github-user-key"
	ProjectCheckoutKeyInfoTypeGithubDashUserDashKey string = "github-user-key"

	// ProjectCheckoutKeyInfoTypeDeployDashKey captures enum value "deploy-key"
	ProjectCheckoutKeyInfoTypeDeployDashKey string = "deploy-key"
)

// prop value enum
func (m *ProjectCheckoutKeyInfo) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectCheckoutKeyInfoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectCheckoutKeyInfo) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project checkout key info based on context it is used
func (m *ProjectCheckoutKeyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectCheckoutKeyInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectCheckoutKeyInfo) UnmarshalBinary(b []byte) error {
	var res ProjectCheckoutKeyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
