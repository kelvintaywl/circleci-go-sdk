// Code generated by go-swagger; DO NOT EDIT.

package schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// GetScheduleReader is a Reader for the GetSchedule structure.
type GetScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetScheduleOK creates a GetScheduleOK with default headers values
func NewGetScheduleOK() *GetScheduleOK {
	return &GetScheduleOK{}
}

/*
GetScheduleOK describes a response with status code 200, with default header values.

A schedule object
*/
type GetScheduleOK struct {
	Payload *models.ScheduleInfo
}

// IsSuccess returns true when this get schedule o k response has a 2xx status code
func (o *GetScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get schedule o k response has a 3xx status code
func (o *GetScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schedule o k response has a 4xx status code
func (o *GetScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get schedule o k response has a 5xx status code
func (o *GetScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get schedule o k response a status code equal to that given
func (o *GetScheduleOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetScheduleOK) Error() string {
	return fmt.Sprintf("[GET /schedule/{id}][%d] getScheduleOK  %+v", 200, o.Payload)
}

func (o *GetScheduleOK) String() string {
	return fmt.Sprintf("[GET /schedule/{id}][%d] getScheduleOK  %+v", 200, o.Payload)
}

func (o *GetScheduleOK) GetPayload() *models.ScheduleInfo {
	return o.Payload
}

func (o *GetScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScheduleInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleBadRequest creates a GetScheduleBadRequest with default headers values
func NewGetScheduleBadRequest() *GetScheduleBadRequest {
	return &GetScheduleBadRequest{}
}

/*
GetScheduleBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type GetScheduleBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this get schedule bad request response has a 2xx status code
func (o *GetScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schedule bad request response has a 3xx status code
func (o *GetScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schedule bad request response has a 4xx status code
func (o *GetScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get schedule bad request response has a 5xx status code
func (o *GetScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get schedule bad request response a status code equal to that given
func (o *GetScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetScheduleBadRequest) Error() string {
	return fmt.Sprintf("[GET /schedule/{id}][%d] getScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *GetScheduleBadRequest) String() string {
	return fmt.Sprintf("[GET /schedule/{id}][%d] getScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *GetScheduleBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *GetScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetScheduleNotFound creates a GetScheduleNotFound with default headers values
func NewGetScheduleNotFound() *GetScheduleNotFound {
	return &GetScheduleNotFound{}
}

/*
GetScheduleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type GetScheduleNotFound struct {
	Payload *models.Errored
}

// IsSuccess returns true when this get schedule not found response has a 2xx status code
func (o *GetScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get schedule not found response has a 3xx status code
func (o *GetScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get schedule not found response has a 4xx status code
func (o *GetScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get schedule not found response has a 5xx status code
func (o *GetScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get schedule not found response a status code equal to that given
func (o *GetScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetScheduleNotFound) Error() string {
	return fmt.Sprintf("[GET /schedule/{id}][%d] getScheduleNotFound  %+v", 404, o.Payload)
}

func (o *GetScheduleNotFound) String() string {
	return fmt.Sprintf("[GET /schedule/{id}][%d] getScheduleNotFound  %+v", 404, o.Payload)
}

func (o *GetScheduleNotFound) GetPayload() *models.Errored {
	return o.Payload
}

func (o *GetScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
