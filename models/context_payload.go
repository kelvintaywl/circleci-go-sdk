// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContextPayload context payload
//
// swagger:model ContextPayload
type ContextPayload struct {

	// The user-defined name of the context.
	// Required: true
	Name *string `json:"name"`

	// owner
	// Required: true
	Owner *ContextPayloadOwner `json:"owner"`
}

// Validate validates this context payload
func (m *ContextPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextPayload) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ContextPayload) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this context payload based on the context it is used
func (m *ContextPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextPayload) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {
		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContextPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContextPayload) UnmarshalBinary(b []byte) error {
	var res ContextPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ContextPayloadOwner context payload owner
//
// swagger:model ContextPayloadOwner
type ContextPayloadOwner struct {

	// The unique identifier name of the owner of the context.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The type of the owner. Defaults to `organization`. Accounts are only used as context owners in server.
	// Required: true
	// Enum: [account organization]
	Type *string `json:"type"`
}

// Validate validates this context payload owner
func (m *ContextPayloadOwner) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContextPayloadOwner) validateID(formats strfmt.Registry) error {

	if err := validate.Required("owner"+"."+"id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("owner"+"."+"id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

var contextPayloadOwnerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["account","organization"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contextPayloadOwnerTypeTypePropEnum = append(contextPayloadOwnerTypeTypePropEnum, v)
	}
}

const (

	// ContextPayloadOwnerTypeAccount captures enum value "account"
	ContextPayloadOwnerTypeAccount string = "account"

	// ContextPayloadOwnerTypeOrganization captures enum value "organization"
	ContextPayloadOwnerTypeOrganization string = "organization"
)

// prop value enum
func (m *ContextPayloadOwner) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contextPayloadOwnerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContextPayloadOwner) validateType(formats strfmt.Registry) error {

	if err := validate.Required("owner"+"."+"type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("owner"+"."+"type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this context payload owner based on context it is used
func (m *ContextPayloadOwner) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContextPayloadOwner) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContextPayloadOwner) UnmarshalBinary(b []byte) error {
	var res ContextPayloadOwner
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
