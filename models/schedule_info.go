// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleInfo schedule info
//
// swagger:model ScheduleInfo
type ScheduleInfo struct {
	ScheduleBaseData

	// actor
	// Required: true
	Actor *User `json:"actor"`

	// The date and time the schedule was created.
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"created-at"`

	// The unique ID of the schedule.
	// Required: true
	// Format: uuid
	ID *strfmt.UUID `json:"id"`

	// The project-slug for the schedule.
	// Required: true
	ProjectSlug *string `json:"project-slug"`

	// The date and time the schedule was last updated.
	// Required: true
	// Format: date-time
	UpdatedAt *strfmt.DateTime `json:"updated-at"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ScheduleInfo) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ScheduleBaseData
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ScheduleBaseData = aO0

	// AO1
	var dataAO1 struct {
		Actor *User `json:"actor"`

		CreatedAt *strfmt.DateTime `json:"created-at"`

		ID *strfmt.UUID `json:"id"`

		ProjectSlug *string `json:"project-slug"`

		UpdatedAt *strfmt.DateTime `json:"updated-at"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Actor = dataAO1.Actor

	m.CreatedAt = dataAO1.CreatedAt

	m.ID = dataAO1.ID

	m.ProjectSlug = dataAO1.ProjectSlug

	m.UpdatedAt = dataAO1.UpdatedAt

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ScheduleInfo) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ScheduleBaseData)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Actor *User `json:"actor"`

		CreatedAt *strfmt.DateTime `json:"created-at"`

		ID *strfmt.UUID `json:"id"`

		ProjectSlug *string `json:"project-slug"`

		UpdatedAt *strfmt.DateTime `json:"updated-at"`
	}

	dataAO1.Actor = m.Actor

	dataAO1.CreatedAt = m.CreatedAt

	dataAO1.ID = m.ID

	dataAO1.ProjectSlug = m.ProjectSlug

	dataAO1.UpdatedAt = m.UpdatedAt

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this schedule info
func (m *ScheduleInfo) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ScheduleBaseData
	if err := m.ScheduleBaseData.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjectSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleInfo) validateActor(formats strfmt.Registry) error {

	if err := validate.Required("actor", "body", m.Actor); err != nil {
		return err
	}

	if m.Actor != nil {
		if err := m.Actor.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduleInfo) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created-at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("created-at", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInfo) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInfo) validateProjectSlug(formats strfmt.Registry) error {

	if err := validate.Required("project-slug", "body", m.ProjectSlug); err != nil {
		return err
	}

	return nil
}

func (m *ScheduleInfo) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated-at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("updated-at", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this schedule info based on the context it is used
func (m *ScheduleInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ScheduleBaseData
	if err := m.ScheduleBaseData.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateActor(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleInfo) contextValidateActor(ctx context.Context, formats strfmt.Registry) error {

	if m.Actor != nil {
		if err := m.Actor.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("actor")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("actor")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleInfo) UnmarshalBinary(b []byte) error {
	var res ScheduleInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
