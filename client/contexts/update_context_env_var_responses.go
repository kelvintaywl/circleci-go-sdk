// Code generated by go-swagger; DO NOT EDIT.

package contexts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// UpdateContextEnvVarReader is a Reader for the UpdateContextEnvVar structure.
type UpdateContextEnvVarReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateContextEnvVarReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateContextEnvVarOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateContextEnvVarBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateContextEnvVarNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateContextEnvVarOK creates a UpdateContextEnvVarOK with default headers values
func NewUpdateContextEnvVarOK() *UpdateContextEnvVarOK {
	return &UpdateContextEnvVarOK{}
}

/*
UpdateContextEnvVarOK describes a response with status code 200, with default header values.

The new context environment variable
*/
type UpdateContextEnvVarOK struct {
	Payload *models.ContextEnvVarInfo
}

// IsSuccess returns true when this update context env var o k response has a 2xx status code
func (o *UpdateContextEnvVarOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update context env var o k response has a 3xx status code
func (o *UpdateContextEnvVarOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update context env var o k response has a 4xx status code
func (o *UpdateContextEnvVarOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update context env var o k response has a 5xx status code
func (o *UpdateContextEnvVarOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update context env var o k response a status code equal to that given
func (o *UpdateContextEnvVarOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateContextEnvVarOK) Error() string {
	return fmt.Sprintf("[PUT /context/{id}/environment-variable/{name}][%d] updateContextEnvVarOK  %+v", 200, o.Payload)
}

func (o *UpdateContextEnvVarOK) String() string {
	return fmt.Sprintf("[PUT /context/{id}/environment-variable/{name}][%d] updateContextEnvVarOK  %+v", 200, o.Payload)
}

func (o *UpdateContextEnvVarOK) GetPayload() *models.ContextEnvVarInfo {
	return o.Payload
}

func (o *UpdateContextEnvVarOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ContextEnvVarInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContextEnvVarBadRequest creates a UpdateContextEnvVarBadRequest with default headers values
func NewUpdateContextEnvVarBadRequest() *UpdateContextEnvVarBadRequest {
	return &UpdateContextEnvVarBadRequest{}
}

/*
UpdateContextEnvVarBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type UpdateContextEnvVarBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this update context env var bad request response has a 2xx status code
func (o *UpdateContextEnvVarBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update context env var bad request response has a 3xx status code
func (o *UpdateContextEnvVarBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update context env var bad request response has a 4xx status code
func (o *UpdateContextEnvVarBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update context env var bad request response has a 5xx status code
func (o *UpdateContextEnvVarBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update context env var bad request response a status code equal to that given
func (o *UpdateContextEnvVarBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateContextEnvVarBadRequest) Error() string {
	return fmt.Sprintf("[PUT /context/{id}/environment-variable/{name}][%d] updateContextEnvVarBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateContextEnvVarBadRequest) String() string {
	return fmt.Sprintf("[PUT /context/{id}/environment-variable/{name}][%d] updateContextEnvVarBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateContextEnvVarBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *UpdateContextEnvVarBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateContextEnvVarNotFound creates a UpdateContextEnvVarNotFound with default headers values
func NewUpdateContextEnvVarNotFound() *UpdateContextEnvVarNotFound {
	return &UpdateContextEnvVarNotFound{}
}

/*
UpdateContextEnvVarNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateContextEnvVarNotFound struct {
	Payload *models.Errored
}

// IsSuccess returns true when this update context env var not found response has a 2xx status code
func (o *UpdateContextEnvVarNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update context env var not found response has a 3xx status code
func (o *UpdateContextEnvVarNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update context env var not found response has a 4xx status code
func (o *UpdateContextEnvVarNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update context env var not found response has a 5xx status code
func (o *UpdateContextEnvVarNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update context env var not found response a status code equal to that given
func (o *UpdateContextEnvVarNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateContextEnvVarNotFound) Error() string {
	return fmt.Sprintf("[PUT /context/{id}/environment-variable/{name}][%d] updateContextEnvVarNotFound  %+v", 404, o.Payload)
}

func (o *UpdateContextEnvVarNotFound) String() string {
	return fmt.Sprintf("[PUT /context/{id}/environment-variable/{name}][%d] updateContextEnvVarNotFound  %+v", 404, o.Payload)
}

func (o *UpdateContextEnvVarNotFound) GetPayload() *models.Errored {
	return o.Payload
}

func (o *UpdateContextEnvVarNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
