// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// ListProjectCheckoutKeysReader is a Reader for the ListProjectCheckoutKeys structure.
type ListProjectCheckoutKeysReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListProjectCheckoutKeysReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListProjectCheckoutKeysOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListProjectCheckoutKeysBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListProjectCheckoutKeysOK creates a ListProjectCheckoutKeysOK with default headers values
func NewListProjectCheckoutKeysOK() *ListProjectCheckoutKeysOK {
	return &ListProjectCheckoutKeysOK{}
}

/*
ListProjectCheckoutKeysOK describes a response with status code 200, with default header values.

A sequence of project checkout keys
*/
type ListProjectCheckoutKeysOK struct {
	Payload *models.ProjectCheckoutKeysInfo
}

// IsSuccess returns true when this list project checkout keys o k response has a 2xx status code
func (o *ListProjectCheckoutKeysOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list project checkout keys o k response has a 3xx status code
func (o *ListProjectCheckoutKeysOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list project checkout keys o k response has a 4xx status code
func (o *ListProjectCheckoutKeysOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list project checkout keys o k response has a 5xx status code
func (o *ListProjectCheckoutKeysOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list project checkout keys o k response a status code equal to that given
func (o *ListProjectCheckoutKeysOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListProjectCheckoutKeysOK) Error() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key][%d] listProjectCheckoutKeysOK  %+v", 200, o.Payload)
}

func (o *ListProjectCheckoutKeysOK) String() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key][%d] listProjectCheckoutKeysOK  %+v", 200, o.Payload)
}

func (o *ListProjectCheckoutKeysOK) GetPayload() *models.ProjectCheckoutKeysInfo {
	return o.Payload
}

func (o *ListProjectCheckoutKeysOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ProjectCheckoutKeysInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListProjectCheckoutKeysBadRequest creates a ListProjectCheckoutKeysBadRequest with default headers values
func NewListProjectCheckoutKeysBadRequest() *ListProjectCheckoutKeysBadRequest {
	return &ListProjectCheckoutKeysBadRequest{}
}

/*
ListProjectCheckoutKeysBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type ListProjectCheckoutKeysBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this list project checkout keys bad request response has a 2xx status code
func (o *ListProjectCheckoutKeysBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list project checkout keys bad request response has a 3xx status code
func (o *ListProjectCheckoutKeysBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list project checkout keys bad request response has a 4xx status code
func (o *ListProjectCheckoutKeysBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list project checkout keys bad request response has a 5xx status code
func (o *ListProjectCheckoutKeysBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list project checkout keys bad request response a status code equal to that given
func (o *ListProjectCheckoutKeysBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListProjectCheckoutKeysBadRequest) Error() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key][%d] listProjectCheckoutKeysBadRequest  %+v", 400, o.Payload)
}

func (o *ListProjectCheckoutKeysBadRequest) String() string {
	return fmt.Sprintf("[GET /project/{project-slug}/checkout-key][%d] listProjectCheckoutKeysBadRequest  %+v", 400, o.Payload)
}

func (o *ListProjectCheckoutKeysBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *ListProjectCheckoutKeysBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
