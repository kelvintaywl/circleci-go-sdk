// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Month month
//
// swagger:model Month
type Month string

func NewMonth(value Month) *Month {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Month.
func (m Month) Pointer() *Month {
	return &m
}

const (

	// MonthJAN captures enum value "JAN"
	MonthJAN Month = "JAN"

	// MonthFEB captures enum value "FEB"
	MonthFEB Month = "FEB"

	// MonthMAR captures enum value "MAR"
	MonthMAR Month = "MAR"

	// MonthAPR captures enum value "APR"
	MonthAPR Month = "APR"

	// MonthMAY captures enum value "MAY"
	MonthMAY Month = "MAY"

	// MonthJUN captures enum value "JUN"
	MonthJUN Month = "JUN"

	// MonthJUL captures enum value "JUL"
	MonthJUL Month = "JUL"

	// MonthAUG captures enum value "AUG"
	MonthAUG Month = "AUG"

	// MonthSEP captures enum value "SEP"
	MonthSEP Month = "SEP"

	// MonthOCT captures enum value "OCT"
	MonthOCT Month = "OCT"

	// MonthNOV captures enum value "NOV"
	MonthNOV Month = "NOV"

	// MonthDEC captures enum value "DEC"
	MonthDEC Month = "DEC"
)

// for schema
var monthEnum []interface{}

func init() {
	var res []Month
	if err := json.Unmarshal([]byte(`["JAN","FEB","MAR","APR","MAY","JUN","JUL","AUG","SEP","OCT","NOV","DEC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		monthEnum = append(monthEnum, v)
	}
}

func (m Month) validateMonthEnum(path, location string, value Month) error {
	if err := validate.EnumCase(path, location, value, monthEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this month
func (m Month) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMonthEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this month based on context it is used
func (m Month) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
