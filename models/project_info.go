// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectInfo project info
//
// swagger:model ProjectInfo
type ProjectInfo struct {

	// The unique identifer for the project
	// Example: c124cca6-d03e-4733-b84d-32b02347b78c
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`

	// The name of the project
	// Example: Foobar
	Name string `json:"name,omitempty"`

	// The identifier of the organization the project belongs to
	// Format: uuid
	OrganizationID strfmt.UUID `json:"organization_id,omitempty"`

	// The name of the organization the project belongs to
	OrganizationName string `json:"organization_name,omitempty"`

	// The slug of the organization the project belongs to
	OrganizationSlug string `json:"organization_slug,omitempty"`

	// Project slug in the form vcs-slug/org-name/repo-name. The / characters may be URL-escaped.
	// Example: github/acme/foobar
	Slug string `json:"slug,omitempty"`

	// vcs info
	VcsInfo *ProjectInfoVcsInfo `json:"vcs_info,omitempty"`
}

// Validate validates this project info
func (m *ProjectInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVcsInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectInfo) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInfo) validateOrganizationID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationID) { // not required
		return nil
	}

	if err := validate.FormatOf("organization_id", "body", "uuid", m.OrganizationID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProjectInfo) validateVcsInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.VcsInfo) { // not required
		return nil
	}

	if m.VcsInfo != nil {
		if err := m.VcsInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs_info")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this project info based on the context it is used
func (m *ProjectInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVcsInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectInfo) contextValidateVcsInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.VcsInfo != nil {
		if err := m.VcsInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vcs_info")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vcs_info")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectInfo) UnmarshalBinary(b []byte) error {
	var res ProjectInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ProjectInfoVcsInfo Information about the VCS that hosts the project source code
//
// swagger:model ProjectInfoVcsInfo
type ProjectInfoVcsInfo struct {

	// Name of the default branch for the project
	// Example: main
	DefaultBranch string `json:"default_branch,omitempty"`

	// The VCS provider
	// Enum: [Bitbucket GitHub CircleCI]
	Provider string `json:"provider,omitempty"`

	// URL to the repository hosting the project's code
	// Example: https://github.com/acmeorg/foobar
	VcsURL string `json:"vcs_url,omitempty"`
}

// Validate validates this project info vcs info
func (m *ProjectInfoVcsInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectInfoVcsInfoTypeProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Bitbucket","GitHub","CircleCI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectInfoVcsInfoTypeProviderPropEnum = append(projectInfoVcsInfoTypeProviderPropEnum, v)
	}
}

const (

	// ProjectInfoVcsInfoProviderBitbucket captures enum value "Bitbucket"
	ProjectInfoVcsInfoProviderBitbucket string = "Bitbucket"

	// ProjectInfoVcsInfoProviderGitHub captures enum value "GitHub"
	ProjectInfoVcsInfoProviderGitHub string = "GitHub"

	// ProjectInfoVcsInfoProviderCircleCI captures enum value "CircleCI"
	ProjectInfoVcsInfoProviderCircleCI string = "CircleCI"
)

// prop value enum
func (m *ProjectInfoVcsInfo) validateProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectInfoVcsInfoTypeProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectInfoVcsInfo) validateProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.Provider) { // not required
		return nil
	}

	// value enum
	if err := m.validateProviderEnum("vcs_info"+"."+"provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project info vcs info based on context it is used
func (m *ProjectInfoVcsInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectInfoVcsInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectInfoVcsInfo) UnmarshalBinary(b []byte) error {
	var res ProjectInfoVcsInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
