// Code generated by go-swagger; DO NOT EDIT.

package project_envvar

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new project envvar API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for project envvar API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProjectEnvVar(params *DeleteProjectEnvVarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectEnvVarOK, error)

	GetProjectEnvVar(params *GetProjectEnvVarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectEnvVarOK, error)

	ListProjectEnvVars(params *ListProjectEnvVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectEnvVarsOK, error)

	AddProjectEnvVar(params *AddProjectEnvVarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectEnvVarCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProjectEnvVar deletes a project environment variable
*/
func (a *Client) DeleteProjectEnvVar(params *DeleteProjectEnvVarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectEnvVarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectEnvVarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectEnvVar",
		Method:             "DELETE",
		PathPattern:        "/project/{project-slug}/envvar/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectEnvVarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectEnvVarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectEnvVar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectEnvVar gets project environment variable

Returns a environment variable for this project.
*/
func (a *Client) GetProjectEnvVar(params *GetProjectEnvVarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectEnvVarOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectEnvVarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectEnvVar",
		Method:             "GET",
		PathPattern:        "/project/{project-slug}/envvar/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectEnvVarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectEnvVarOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectEnvVar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
ListProjectEnvVars lists project environment variables

Returns all environment variables for this project.
*/
func (a *Client) ListProjectEnvVars(params *ListProjectEnvVarsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListProjectEnvVarsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProjectEnvVarsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "ListProjectEnvVars",
		Method:             "GET",
		PathPattern:        "/project/{project-slug}/envvar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProjectEnvVarsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListProjectEnvVarsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for ListProjectEnvVars: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
AddProjectEnvVar creates a project environment variable
*/
func (a *Client) AddProjectEnvVar(params *AddProjectEnvVarParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddProjectEnvVarCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddProjectEnvVarParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addProjectEnvVar",
		Method:             "POST",
		PathPattern:        "/project/{project-slug}/envvar",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddProjectEnvVarReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddProjectEnvVarCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addProjectEnvVar: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
