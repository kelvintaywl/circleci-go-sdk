// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewDeleteProjectLevelClaimsParams creates a new DeleteProjectLevelClaimsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewDeleteProjectLevelClaimsParams() *DeleteProjectLevelClaimsParams {
	return &DeleteProjectLevelClaimsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProjectLevelClaimsParamsWithTimeout creates a new DeleteProjectLevelClaimsParams object
// with the ability to set a timeout on a request.
func NewDeleteProjectLevelClaimsParamsWithTimeout(timeout time.Duration) *DeleteProjectLevelClaimsParams {
	return &DeleteProjectLevelClaimsParams{
		timeout: timeout,
	}
}

// NewDeleteProjectLevelClaimsParamsWithContext creates a new DeleteProjectLevelClaimsParams object
// with the ability to set a context for a request.
func NewDeleteProjectLevelClaimsParamsWithContext(ctx context.Context) *DeleteProjectLevelClaimsParams {
	return &DeleteProjectLevelClaimsParams{
		Context: ctx,
	}
}

// NewDeleteProjectLevelClaimsParamsWithHTTPClient creates a new DeleteProjectLevelClaimsParams object
// with the ability to set a custom HTTPClient for a request.
func NewDeleteProjectLevelClaimsParamsWithHTTPClient(client *http.Client) *DeleteProjectLevelClaimsParams {
	return &DeleteProjectLevelClaimsParams{
		HTTPClient: client,
	}
}

/*
DeleteProjectLevelClaimsParams contains all the parameters to send to the API endpoint

	for the delete project level claims operation.

	Typically these are written to a http.Request.
*/
type DeleteProjectLevelClaimsParams struct {

	/* Claims.

	   Comma-separated ist of claims to delete. Valid values are ttl, audience
	*/
	Claims string

	/* OrgID.

	   The unique ID of the organization.

	   Format: uuid
	*/
	OrgID strfmt.UUID

	/* ProjectID.

	   The unique ID of the project.

	   Format: uuid
	*/
	ProjectID strfmt.UUID

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the delete project level claims params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteProjectLevelClaimsParams) WithDefaults() *DeleteProjectLevelClaimsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the delete project level claims params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *DeleteProjectLevelClaimsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) WithTimeout(timeout time.Duration) *DeleteProjectLevelClaimsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) WithContext(ctx context.Context) *DeleteProjectLevelClaimsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) WithHTTPClient(client *http.Client) *DeleteProjectLevelClaimsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClaims adds the claims to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) WithClaims(claims string) *DeleteProjectLevelClaimsParams {
	o.SetClaims(claims)
	return o
}

// SetClaims adds the claims to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) SetClaims(claims string) {
	o.Claims = claims
}

// WithOrgID adds the orgID to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) WithOrgID(orgID strfmt.UUID) *DeleteProjectLevelClaimsParams {
	o.SetOrgID(orgID)
	return o
}

// SetOrgID adds the orgId to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) SetOrgID(orgID strfmt.UUID) {
	o.OrgID = orgID
}

// WithProjectID adds the projectID to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) WithProjectID(projectID strfmt.UUID) *DeleteProjectLevelClaimsParams {
	o.SetProjectID(projectID)
	return o
}

// SetProjectID adds the projectId to the delete project level claims params
func (o *DeleteProjectLevelClaimsParams) SetProjectID(projectID strfmt.UUID) {
	o.ProjectID = projectID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProjectLevelClaimsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param claims
	qrClaims := o.Claims
	qClaims := qrClaims
	if qClaims != "" {

		if err := r.SetQueryParam("claims", qClaims); err != nil {
			return err
		}
	}

	// path param org-id
	if err := r.SetPathParam("org-id", o.OrgID.String()); err != nil {
		return err
	}

	// path param project-id
	if err := r.SetPathParam("project-id", o.ProjectID.String()); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
