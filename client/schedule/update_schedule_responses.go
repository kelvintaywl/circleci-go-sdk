// Code generated by go-swagger; DO NOT EDIT.

package schedule

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// UpdateScheduleReader is a Reader for the UpdateSchedule structure.
type UpdateScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateScheduleOK creates a UpdateScheduleOK with default headers values
func NewUpdateScheduleOK() *UpdateScheduleOK {
	return &UpdateScheduleOK{}
}

/*
UpdateScheduleOK describes a response with status code 200, with default header values.

A schedule object
*/
type UpdateScheduleOK struct {
	Payload *models.ScheduleInfo
}

// IsSuccess returns true when this update schedule o k response has a 2xx status code
func (o *UpdateScheduleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update schedule o k response has a 3xx status code
func (o *UpdateScheduleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule o k response has a 4xx status code
func (o *UpdateScheduleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update schedule o k response has a 5xx status code
func (o *UpdateScheduleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule o k response a status code equal to that given
func (o *UpdateScheduleOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateScheduleOK) Error() string {
	return fmt.Sprintf("[PATCH /schedule/{id}][%d] updateScheduleOK  %+v", 200, o.Payload)
}

func (o *UpdateScheduleOK) String() string {
	return fmt.Sprintf("[PATCH /schedule/{id}][%d] updateScheduleOK  %+v", 200, o.Payload)
}

func (o *UpdateScheduleOK) GetPayload() *models.ScheduleInfo {
	return o.Payload
}

func (o *UpdateScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ScheduleInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleBadRequest creates a UpdateScheduleBadRequest with default headers values
func NewUpdateScheduleBadRequest() *UpdateScheduleBadRequest {
	return &UpdateScheduleBadRequest{}
}

/*
UpdateScheduleBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type UpdateScheduleBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this update schedule bad request response has a 2xx status code
func (o *UpdateScheduleBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule bad request response has a 3xx status code
func (o *UpdateScheduleBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule bad request response has a 4xx status code
func (o *UpdateScheduleBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule bad request response has a 5xx status code
func (o *UpdateScheduleBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule bad request response a status code equal to that given
func (o *UpdateScheduleBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateScheduleBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /schedule/{id}][%d] updateScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScheduleBadRequest) String() string {
	return fmt.Sprintf("[PATCH /schedule/{id}][%d] updateScheduleBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateScheduleBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *UpdateScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateScheduleNotFound creates a UpdateScheduleNotFound with default headers values
func NewUpdateScheduleNotFound() *UpdateScheduleNotFound {
	return &UpdateScheduleNotFound{}
}

/*
UpdateScheduleNotFound describes a response with status code 404, with default header values.

Not Found
*/
type UpdateScheduleNotFound struct {
	Payload *models.Errored
}

// IsSuccess returns true when this update schedule not found response has a 2xx status code
func (o *UpdateScheduleNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update schedule not found response has a 3xx status code
func (o *UpdateScheduleNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update schedule not found response has a 4xx status code
func (o *UpdateScheduleNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update schedule not found response has a 5xx status code
func (o *UpdateScheduleNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update schedule not found response a status code equal to that given
func (o *UpdateScheduleNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateScheduleNotFound) Error() string {
	return fmt.Sprintf("[PATCH /schedule/{id}][%d] updateScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScheduleNotFound) String() string {
	return fmt.Sprintf("[PATCH /schedule/{id}][%d] updateScheduleNotFound  %+v", 404, o.Payload)
}

func (o *UpdateScheduleNotFound) GetPayload() *models.Errored {
	return o.Payload
}

func (o *UpdateScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
