// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// PatchProjectLevelClaimsReader is a Reader for the PatchProjectLevelClaims structure.
type PatchProjectLevelClaimsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProjectLevelClaimsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchProjectLevelClaimsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchProjectLevelClaimsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchProjectLevelClaimsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchProjectLevelClaimsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchProjectLevelClaimsOK creates a PatchProjectLevelClaimsOK with default headers values
func NewPatchProjectLevelClaimsOK() *PatchProjectLevelClaimsOK {
	return &PatchProjectLevelClaimsOK{}
}

/*
PatchProjectLevelClaimsOK describes a response with status code 200, with default header values.

Claims successfully patched.
*/
type PatchProjectLevelClaimsOK struct {
	Payload *models.OrgLevelClaimsInfo
}

// IsSuccess returns true when this patch project level claims o k response has a 2xx status code
func (o *PatchProjectLevelClaimsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch project level claims o k response has a 3xx status code
func (o *PatchProjectLevelClaimsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project level claims o k response has a 4xx status code
func (o *PatchProjectLevelClaimsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch project level claims o k response has a 5xx status code
func (o *PatchProjectLevelClaimsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project level claims o k response a status code equal to that given
func (o *PatchProjectLevelClaimsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchProjectLevelClaimsOK) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsOK  %+v", 200, o.Payload)
}

func (o *PatchProjectLevelClaimsOK) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsOK  %+v", 200, o.Payload)
}

func (o *PatchProjectLevelClaimsOK) GetPayload() *models.OrgLevelClaimsInfo {
	return o.Payload
}

func (o *PatchProjectLevelClaimsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrgLevelClaimsInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectLevelClaimsBadRequest creates a PatchProjectLevelClaimsBadRequest with default headers values
func NewPatchProjectLevelClaimsBadRequest() *PatchProjectLevelClaimsBadRequest {
	return &PatchProjectLevelClaimsBadRequest{}
}

/*
PatchProjectLevelClaimsBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type PatchProjectLevelClaimsBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this patch project level claims bad request response has a 2xx status code
func (o *PatchProjectLevelClaimsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch project level claims bad request response has a 3xx status code
func (o *PatchProjectLevelClaimsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project level claims bad request response has a 4xx status code
func (o *PatchProjectLevelClaimsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch project level claims bad request response has a 5xx status code
func (o *PatchProjectLevelClaimsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project level claims bad request response a status code equal to that given
func (o *PatchProjectLevelClaimsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchProjectLevelClaimsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchProjectLevelClaimsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchProjectLevelClaimsBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *PatchProjectLevelClaimsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectLevelClaimsForbidden creates a PatchProjectLevelClaimsForbidden with default headers values
func NewPatchProjectLevelClaimsForbidden() *PatchProjectLevelClaimsForbidden {
	return &PatchProjectLevelClaimsForbidden{}
}

/*
PatchProjectLevelClaimsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchProjectLevelClaimsForbidden struct {
	Payload *models.Errored
}

// IsSuccess returns true when this patch project level claims forbidden response has a 2xx status code
func (o *PatchProjectLevelClaimsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch project level claims forbidden response has a 3xx status code
func (o *PatchProjectLevelClaimsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project level claims forbidden response has a 4xx status code
func (o *PatchProjectLevelClaimsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch project level claims forbidden response has a 5xx status code
func (o *PatchProjectLevelClaimsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch project level claims forbidden response a status code equal to that given
func (o *PatchProjectLevelClaimsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchProjectLevelClaimsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsForbidden  %+v", 403, o.Payload)
}

func (o *PatchProjectLevelClaimsForbidden) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsForbidden  %+v", 403, o.Payload)
}

func (o *PatchProjectLevelClaimsForbidden) GetPayload() *models.Errored {
	return o.Payload
}

func (o *PatchProjectLevelClaimsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectLevelClaimsInternalServerError creates a PatchProjectLevelClaimsInternalServerError with default headers values
func NewPatchProjectLevelClaimsInternalServerError() *PatchProjectLevelClaimsInternalServerError {
	return &PatchProjectLevelClaimsInternalServerError{}
}

/*
PatchProjectLevelClaimsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchProjectLevelClaimsInternalServerError struct {
	Payload *models.Errored
}

// IsSuccess returns true when this patch project level claims internal server error response has a 2xx status code
func (o *PatchProjectLevelClaimsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch project level claims internal server error response has a 3xx status code
func (o *PatchProjectLevelClaimsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch project level claims internal server error response has a 4xx status code
func (o *PatchProjectLevelClaimsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch project level claims internal server error response has a 5xx status code
func (o *PatchProjectLevelClaimsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch project level claims internal server error response a status code equal to that given
func (o *PatchProjectLevelClaimsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchProjectLevelClaimsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchProjectLevelClaimsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] patchProjectLevelClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchProjectLevelClaimsInternalServerError) GetPayload() *models.Errored {
	return o.Payload
}

func (o *PatchProjectLevelClaimsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
