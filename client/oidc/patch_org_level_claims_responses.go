// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// PatchOrgLevelClaimsReader is a Reader for the PatchOrgLevelClaims structure.
type PatchOrgLevelClaimsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchOrgLevelClaimsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchOrgLevelClaimsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchOrgLevelClaimsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchOrgLevelClaimsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchOrgLevelClaimsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchOrgLevelClaimsOK creates a PatchOrgLevelClaimsOK with default headers values
func NewPatchOrgLevelClaimsOK() *PatchOrgLevelClaimsOK {
	return &PatchOrgLevelClaimsOK{}
}

/*
PatchOrgLevelClaimsOK describes a response with status code 200, with default header values.

Claims successfully patched.
*/
type PatchOrgLevelClaimsOK struct {
	Payload *models.OrgLevelClaimsInfo
}

// IsSuccess returns true when this patch org level claims o k response has a 2xx status code
func (o *PatchOrgLevelClaimsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this patch org level claims o k response has a 3xx status code
func (o *PatchOrgLevelClaimsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch org level claims o k response has a 4xx status code
func (o *PatchOrgLevelClaimsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch org level claims o k response has a 5xx status code
func (o *PatchOrgLevelClaimsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this patch org level claims o k response a status code equal to that given
func (o *PatchOrgLevelClaimsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PatchOrgLevelClaimsOK) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsOK  %+v", 200, o.Payload)
}

func (o *PatchOrgLevelClaimsOK) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsOK  %+v", 200, o.Payload)
}

func (o *PatchOrgLevelClaimsOK) GetPayload() *models.OrgLevelClaimsInfo {
	return o.Payload
}

func (o *PatchOrgLevelClaimsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrgLevelClaimsInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrgLevelClaimsBadRequest creates a PatchOrgLevelClaimsBadRequest with default headers values
func NewPatchOrgLevelClaimsBadRequest() *PatchOrgLevelClaimsBadRequest {
	return &PatchOrgLevelClaimsBadRequest{}
}

/*
PatchOrgLevelClaimsBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type PatchOrgLevelClaimsBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this patch org level claims bad request response has a 2xx status code
func (o *PatchOrgLevelClaimsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch org level claims bad request response has a 3xx status code
func (o *PatchOrgLevelClaimsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch org level claims bad request response has a 4xx status code
func (o *PatchOrgLevelClaimsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch org level claims bad request response has a 5xx status code
func (o *PatchOrgLevelClaimsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this patch org level claims bad request response a status code equal to that given
func (o *PatchOrgLevelClaimsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PatchOrgLevelClaimsBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchOrgLevelClaimsBadRequest) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *PatchOrgLevelClaimsBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *PatchOrgLevelClaimsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrgLevelClaimsForbidden creates a PatchOrgLevelClaimsForbidden with default headers values
func NewPatchOrgLevelClaimsForbidden() *PatchOrgLevelClaimsForbidden {
	return &PatchOrgLevelClaimsForbidden{}
}

/*
PatchOrgLevelClaimsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchOrgLevelClaimsForbidden struct {
	Payload *models.Errored
}

// IsSuccess returns true when this patch org level claims forbidden response has a 2xx status code
func (o *PatchOrgLevelClaimsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch org level claims forbidden response has a 3xx status code
func (o *PatchOrgLevelClaimsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch org level claims forbidden response has a 4xx status code
func (o *PatchOrgLevelClaimsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this patch org level claims forbidden response has a 5xx status code
func (o *PatchOrgLevelClaimsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this patch org level claims forbidden response a status code equal to that given
func (o *PatchOrgLevelClaimsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PatchOrgLevelClaimsForbidden) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsForbidden  %+v", 403, o.Payload)
}

func (o *PatchOrgLevelClaimsForbidden) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsForbidden  %+v", 403, o.Payload)
}

func (o *PatchOrgLevelClaimsForbidden) GetPayload() *models.Errored {
	return o.Payload
}

func (o *PatchOrgLevelClaimsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchOrgLevelClaimsInternalServerError creates a PatchOrgLevelClaimsInternalServerError with default headers values
func NewPatchOrgLevelClaimsInternalServerError() *PatchOrgLevelClaimsInternalServerError {
	return &PatchOrgLevelClaimsInternalServerError{}
}

/*
PatchOrgLevelClaimsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type PatchOrgLevelClaimsInternalServerError struct {
	Payload *models.Errored
}

// IsSuccess returns true when this patch org level claims internal server error response has a 2xx status code
func (o *PatchOrgLevelClaimsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this patch org level claims internal server error response has a 3xx status code
func (o *PatchOrgLevelClaimsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this patch org level claims internal server error response has a 4xx status code
func (o *PatchOrgLevelClaimsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this patch org level claims internal server error response has a 5xx status code
func (o *PatchOrgLevelClaimsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this patch org level claims internal server error response a status code equal to that given
func (o *PatchOrgLevelClaimsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PatchOrgLevelClaimsInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchOrgLevelClaimsInternalServerError) String() string {
	return fmt.Sprintf("[PATCH /org/{org-id}/oidc-custom-claims][%d] patchOrgLevelClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *PatchOrgLevelClaimsInternalServerError) GetPayload() *models.Errored {
	return o.Payload
}

func (o *PatchOrgLevelClaimsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
