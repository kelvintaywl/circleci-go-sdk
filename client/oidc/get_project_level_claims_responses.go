// Code generated by go-swagger; DO NOT EDIT.

package oidc

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/kelvintaywl/circleci-go-sdk/models"
)

// GetProjectLevelClaimsReader is a Reader for the GetProjectLevelClaims structure.
type GetProjectLevelClaimsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetProjectLevelClaimsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetProjectLevelClaimsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetProjectLevelClaimsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetProjectLevelClaimsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetProjectLevelClaimsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetProjectLevelClaimsOK creates a GetProjectLevelClaimsOK with default headers values
func NewGetProjectLevelClaimsOK() *GetProjectLevelClaimsOK {
	return &GetProjectLevelClaimsOK{}
}

/*
GetProjectLevelClaimsOK describes a response with status code 200, with default header values.

Claims successfully fetched.
*/
type GetProjectLevelClaimsOK struct {
	Payload *models.OrgLevelClaimsInfo
}

// IsSuccess returns true when this get project level claims o k response has a 2xx status code
func (o *GetProjectLevelClaimsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get project level claims o k response has a 3xx status code
func (o *GetProjectLevelClaimsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project level claims o k response has a 4xx status code
func (o *GetProjectLevelClaimsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project level claims o k response has a 5xx status code
func (o *GetProjectLevelClaimsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get project level claims o k response a status code equal to that given
func (o *GetProjectLevelClaimsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetProjectLevelClaimsOK) Error() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsOK  %+v", 200, o.Payload)
}

func (o *GetProjectLevelClaimsOK) String() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsOK  %+v", 200, o.Payload)
}

func (o *GetProjectLevelClaimsOK) GetPayload() *models.OrgLevelClaimsInfo {
	return o.Payload
}

func (o *GetProjectLevelClaimsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.OrgLevelClaimsInfo)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectLevelClaimsBadRequest creates a GetProjectLevelClaimsBadRequest with default headers values
func NewGetProjectLevelClaimsBadRequest() *GetProjectLevelClaimsBadRequest {
	return &GetProjectLevelClaimsBadRequest{}
}

/*
GetProjectLevelClaimsBadRequest describes a response with status code 400, with default header values.

Invalid input
*/
type GetProjectLevelClaimsBadRequest struct {
	Payload *models.Errored
}

// IsSuccess returns true when this get project level claims bad request response has a 2xx status code
func (o *GetProjectLevelClaimsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project level claims bad request response has a 3xx status code
func (o *GetProjectLevelClaimsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project level claims bad request response has a 4xx status code
func (o *GetProjectLevelClaimsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project level claims bad request response has a 5xx status code
func (o *GetProjectLevelClaimsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get project level claims bad request response a status code equal to that given
func (o *GetProjectLevelClaimsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetProjectLevelClaimsBadRequest) Error() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *GetProjectLevelClaimsBadRequest) String() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsBadRequest  %+v", 400, o.Payload)
}

func (o *GetProjectLevelClaimsBadRequest) GetPayload() *models.Errored {
	return o.Payload
}

func (o *GetProjectLevelClaimsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectLevelClaimsForbidden creates a GetProjectLevelClaimsForbidden with default headers values
func NewGetProjectLevelClaimsForbidden() *GetProjectLevelClaimsForbidden {
	return &GetProjectLevelClaimsForbidden{}
}

/*
GetProjectLevelClaimsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetProjectLevelClaimsForbidden struct {
	Payload *models.Errored
}

// IsSuccess returns true when this get project level claims forbidden response has a 2xx status code
func (o *GetProjectLevelClaimsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project level claims forbidden response has a 3xx status code
func (o *GetProjectLevelClaimsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project level claims forbidden response has a 4xx status code
func (o *GetProjectLevelClaimsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get project level claims forbidden response has a 5xx status code
func (o *GetProjectLevelClaimsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get project level claims forbidden response a status code equal to that given
func (o *GetProjectLevelClaimsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetProjectLevelClaimsForbidden) Error() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsForbidden  %+v", 403, o.Payload)
}

func (o *GetProjectLevelClaimsForbidden) String() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsForbidden  %+v", 403, o.Payload)
}

func (o *GetProjectLevelClaimsForbidden) GetPayload() *models.Errored {
	return o.Payload
}

func (o *GetProjectLevelClaimsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetProjectLevelClaimsInternalServerError creates a GetProjectLevelClaimsInternalServerError with default headers values
func NewGetProjectLevelClaimsInternalServerError() *GetProjectLevelClaimsInternalServerError {
	return &GetProjectLevelClaimsInternalServerError{}
}

/*
GetProjectLevelClaimsInternalServerError describes a response with status code 500, with default header values.

Server Error
*/
type GetProjectLevelClaimsInternalServerError struct {
	Payload *models.Errored
}

// IsSuccess returns true when this get project level claims internal server error response has a 2xx status code
func (o *GetProjectLevelClaimsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get project level claims internal server error response has a 3xx status code
func (o *GetProjectLevelClaimsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get project level claims internal server error response has a 4xx status code
func (o *GetProjectLevelClaimsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get project level claims internal server error response has a 5xx status code
func (o *GetProjectLevelClaimsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get project level claims internal server error response a status code equal to that given
func (o *GetProjectLevelClaimsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetProjectLevelClaimsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetProjectLevelClaimsInternalServerError) String() string {
	return fmt.Sprintf("[GET /org/{org-id}/projecct/{project-id}/oidc-custom-claims][%d] getProjectLevelClaimsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetProjectLevelClaimsInternalServerError) GetPayload() *models.Errored {
	return o.Payload
}

func (o *GetProjectLevelClaimsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Errored)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
