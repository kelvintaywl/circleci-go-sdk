// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleBaseData schedule base data
//
// swagger:model ScheduleBaseData
type ScheduleBaseData struct {

	// Description of the schedule.
	Description string `json:"description,omitempty"`

	// Name of the schedule.
	Name string `json:"name,omitempty"`

	// parameters
	Parameters *ScheduleBaseDataParameters `json:"parameters,omitempty"`

	// timetable
	Timetable *ScheduleBaseDataTimetable `json:"timetable,omitempty"`
}

// Validate validates this schedule base data
func (m *ScheduleBaseData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimetable(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleBaseData) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduleBaseData) validateTimetable(formats strfmt.Registry) error {
	if swag.IsZero(m.Timetable) { // not required
		return nil
	}

	if m.Timetable != nil {
		if err := m.Timetable.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this schedule base data based on the context it is used
func (m *ScheduleBaseData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimetable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleBaseData) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	if m.Parameters != nil {
		if err := m.Parameters.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduleBaseData) contextValidateTimetable(ctx context.Context, formats strfmt.Registry) error {

	if m.Timetable != nil {
		if err := m.Timetable.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleBaseData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleBaseData) UnmarshalBinary(b []byte) error {
	var res ScheduleBaseData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleBaseDataParameters Pipeline parameters represented as key-value pairs. Must contain branch or tag.
//
// swagger:model ScheduleBaseDataParameters
type ScheduleBaseDataParameters struct {

	// branch
	Branch string `json:"branch,omitempty"`

	// tag
	Tag string `json:"tag,omitempty"`

	// schedule base data parameters
	ScheduleBaseDataParameters map[string]interface{} `json:"-"`
}

// UnmarshalJSON unmarshals this object with additional properties from JSON
func (m *ScheduleBaseDataParameters) UnmarshalJSON(data []byte) error {
	// stage 1, bind the properties
	var stage1 struct {

		// branch
		Branch string `json:"branch,omitempty"`

		// tag
		Tag string `json:"tag,omitempty"`
	}
	if err := json.Unmarshal(data, &stage1); err != nil {
		return err
	}
	var rcv ScheduleBaseDataParameters

	rcv.Branch = stage1.Branch
	rcv.Tag = stage1.Tag
	*m = rcv

	// stage 2, remove properties and add to map
	stage2 := make(map[string]json.RawMessage)
	if err := json.Unmarshal(data, &stage2); err != nil {
		return err
	}

	delete(stage2, "branch")
	delete(stage2, "tag")
	// stage 3, add additional properties values
	if len(stage2) > 0 {
		result := make(map[string]interface{})
		for k, v := range stage2 {
			var toadd interface{}
			if err := json.Unmarshal(v, &toadd); err != nil {
				return err
			}
			result[k] = toadd
		}
		m.ScheduleBaseDataParameters = result
	}

	return nil
}

// MarshalJSON marshals this object with additional properties into a JSON object
func (m ScheduleBaseDataParameters) MarshalJSON() ([]byte, error) {
	var stage1 struct {

		// branch
		Branch string `json:"branch,omitempty"`

		// tag
		Tag string `json:"tag,omitempty"`
	}

	stage1.Branch = m.Branch
	stage1.Tag = m.Tag

	// make JSON object for known properties
	props, err := json.Marshal(stage1)
	if err != nil {
		return nil, err
	}

	if len(m.ScheduleBaseDataParameters) == 0 { // no additional properties
		return props, nil
	}

	// make JSON object for the additional properties
	additional, err := json.Marshal(m.ScheduleBaseDataParameters)
	if err != nil {
		return nil, err
	}

	if len(props) < 3 { // "{}": only additional properties
		return additional, nil
	}

	// concatenate the 2 objects
	return swag.ConcatJSON(props, additional), nil
}

// Validate validates this schedule base data parameters
func (m *ScheduleBaseDataParameters) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this schedule base data parameters based on context it is used
func (m *ScheduleBaseDataParameters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleBaseDataParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleBaseDataParameters) UnmarshalBinary(b []byte) error {
	var res ScheduleBaseDataParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ScheduleBaseDataTimetable Timetable that specifies when a schedule triggers.
//
// swagger:model ScheduleBaseDataTimetable
type ScheduleBaseDataTimetable struct {

	// Days in a month in which the schedule triggers. This is mutually exclusive with days in a week.
	DaysOfMonth []DayOfAMonth `json:"days-of-month"`

	// Days in a week in which the schedule triggers.
	DaysOfWeek []DayOfAWeek `json:"days-of-week"`

	// Hours in a day in which the schedule triggers.
	// Required: true
	HoursOfDay []*HourOfADay `json:"hours-of-day"`

	// Months in which the schedule triggers.
	Months []Month `json:"months"`

	// Number of times a schedule triggers per hour, value must be between 1 and 60.
	// Required: true
	// Maximum: 60
	// Minimum: 1
	PerHour *int64 `json:"per-hour"`
}

// Validate validates this schedule base data timetable
func (m *ScheduleBaseDataTimetable) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDaysOfMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHoursOfDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePerHour(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleBaseDataTimetable) validateDaysOfMonth(formats strfmt.Registry) error {
	if swag.IsZero(m.DaysOfMonth) { // not required
		return nil
	}

	for i := 0; i < len(m.DaysOfMonth); i++ {

		if err := m.DaysOfMonth[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable" + "." + "days-of-month" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable" + "." + "days-of-month" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ScheduleBaseDataTimetable) validateDaysOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DaysOfWeek) { // not required
		return nil
	}

	for i := 0; i < len(m.DaysOfWeek); i++ {

		if err := m.DaysOfWeek[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable" + "." + "days-of-week" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable" + "." + "days-of-week" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ScheduleBaseDataTimetable) validateHoursOfDay(formats strfmt.Registry) error {

	if err := validate.Required("timetable"+"."+"hours-of-day", "body", m.HoursOfDay); err != nil {
		return err
	}

	for i := 0; i < len(m.HoursOfDay); i++ {
		if swag.IsZero(m.HoursOfDay[i]) { // not required
			continue
		}

		if m.HoursOfDay[i] != nil {
			if err := m.HoursOfDay[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timetable" + "." + "hours-of-day" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timetable" + "." + "hours-of-day" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleBaseDataTimetable) validateMonths(formats strfmt.Registry) error {
	if swag.IsZero(m.Months) { // not required
		return nil
	}

	for i := 0; i < len(m.Months); i++ {

		if err := m.Months[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable" + "." + "months" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable" + "." + "months" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ScheduleBaseDataTimetable) validatePerHour(formats strfmt.Registry) error {

	if err := validate.Required("timetable"+"."+"per-hour", "body", m.PerHour); err != nil {
		return err
	}

	if err := validate.MinimumInt("timetable"+"."+"per-hour", "body", *m.PerHour, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("timetable"+"."+"per-hour", "body", *m.PerHour, 60, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this schedule base data timetable based on the context it is used
func (m *ScheduleBaseDataTimetable) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDaysOfMonth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDaysOfWeek(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHoursOfDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonths(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduleBaseDataTimetable) contextValidateDaysOfMonth(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DaysOfMonth); i++ {

		if err := m.DaysOfMonth[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable" + "." + "days-of-month" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable" + "." + "days-of-month" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ScheduleBaseDataTimetable) contextValidateDaysOfWeek(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DaysOfWeek); i++ {

		if err := m.DaysOfWeek[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable" + "." + "days-of-week" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable" + "." + "days-of-week" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ScheduleBaseDataTimetable) contextValidateHoursOfDay(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.HoursOfDay); i++ {

		if m.HoursOfDay[i] != nil {
			if err := m.HoursOfDay[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("timetable" + "." + "hours-of-day" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("timetable" + "." + "hours-of-day" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ScheduleBaseDataTimetable) contextValidateMonths(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Months); i++ {

		if err := m.Months[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timetable" + "." + "months" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timetable" + "." + "months" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleBaseDataTimetable) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleBaseDataTimetable) UnmarshalBinary(b []byte) error {
	var res ScheduleBaseDataTimetable
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
