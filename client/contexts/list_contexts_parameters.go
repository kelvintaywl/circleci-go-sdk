// Code generated by go-swagger; DO NOT EDIT.

package contexts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListContextsParams creates a new ListContextsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListContextsParams() *ListContextsParams {
	return &ListContextsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListContextsParamsWithTimeout creates a new ListContextsParams object
// with the ability to set a timeout on a request.
func NewListContextsParamsWithTimeout(timeout time.Duration) *ListContextsParams {
	return &ListContextsParams{
		timeout: timeout,
	}
}

// NewListContextsParamsWithContext creates a new ListContextsParams object
// with the ability to set a context for a request.
func NewListContextsParamsWithContext(ctx context.Context) *ListContextsParams {
	return &ListContextsParams{
		Context: ctx,
	}
}

// NewListContextsParamsWithHTTPClient creates a new ListContextsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListContextsParamsWithHTTPClient(client *http.Client) *ListContextsParams {
	return &ListContextsParams{
		HTTPClient: client,
	}
}

/*
ListContextsParams contains all the parameters to send to the API endpoint

	for the list contexts operation.

	Typically these are written to a http.Request.
*/
type ListContextsParams struct {

	/* OwnerID.

	   The unique ID of the owner of the context. Specify either this or owner-slug.

	   Format: uuid
	*/
	OwnerID *strfmt.UUID

	/* OwnerSlug.

	   A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts.
	*/
	OwnerSlug *string

	/* OwnerType.

	   The type of the owner. Defaults to `organization`. Accounts are only used as context owners in server.

	   Default: "organization"
	*/
	OwnerType string

	/* PageToken.

	   A token to retrieve the next page of results
	*/
	PageToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list contexts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListContextsParams) WithDefaults() *ListContextsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list contexts params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListContextsParams) SetDefaults() {
	var (
		ownerTypeDefault = string("organization")
	)

	val := ListContextsParams{
		OwnerType: ownerTypeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list contexts params
func (o *ListContextsParams) WithTimeout(timeout time.Duration) *ListContextsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list contexts params
func (o *ListContextsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list contexts params
func (o *ListContextsParams) WithContext(ctx context.Context) *ListContextsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list contexts params
func (o *ListContextsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list contexts params
func (o *ListContextsParams) WithHTTPClient(client *http.Client) *ListContextsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list contexts params
func (o *ListContextsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOwnerID adds the ownerID to the list contexts params
func (o *ListContextsParams) WithOwnerID(ownerID *strfmt.UUID) *ListContextsParams {
	o.SetOwnerID(ownerID)
	return o
}

// SetOwnerID adds the ownerId to the list contexts params
func (o *ListContextsParams) SetOwnerID(ownerID *strfmt.UUID) {
	o.OwnerID = ownerID
}

// WithOwnerSlug adds the ownerSlug to the list contexts params
func (o *ListContextsParams) WithOwnerSlug(ownerSlug *string) *ListContextsParams {
	o.SetOwnerSlug(ownerSlug)
	return o
}

// SetOwnerSlug adds the ownerSlug to the list contexts params
func (o *ListContextsParams) SetOwnerSlug(ownerSlug *string) {
	o.OwnerSlug = ownerSlug
}

// WithOwnerType adds the ownerType to the list contexts params
func (o *ListContextsParams) WithOwnerType(ownerType string) *ListContextsParams {
	o.SetOwnerType(ownerType)
	return o
}

// SetOwnerType adds the ownerType to the list contexts params
func (o *ListContextsParams) SetOwnerType(ownerType string) {
	o.OwnerType = ownerType
}

// WithPageToken adds the pageToken to the list contexts params
func (o *ListContextsParams) WithPageToken(pageToken *string) *ListContextsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the list contexts params
func (o *ListContextsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WriteToRequest writes these params to a swagger request
func (o *ListContextsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OwnerID != nil {

		// query param owner-id
		var qrOwnerID strfmt.UUID

		if o.OwnerID != nil {
			qrOwnerID = *o.OwnerID
		}
		qOwnerID := qrOwnerID.String()
		if qOwnerID != "" {

			if err := r.SetQueryParam("owner-id", qOwnerID); err != nil {
				return err
			}
		}
	}

	if o.OwnerSlug != nil {

		// query param owner-slug
		var qrOwnerSlug string

		if o.OwnerSlug != nil {
			qrOwnerSlug = *o.OwnerSlug
		}
		qOwnerSlug := qrOwnerSlug
		if qOwnerSlug != "" {

			if err := r.SetQueryParam("owner-slug", qOwnerSlug); err != nil {
				return err
			}
		}
	}

	// query param owner-type
	qrOwnerType := o.OwnerType
	qOwnerType := qrOwnerType
	if qOwnerType != "" {

		if err := r.SetQueryParam("owner-type", qOwnerType); err != nil {
			return err
		}
	}

	if o.PageToken != nil {

		// query param page-token
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("page-token", qPageToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
