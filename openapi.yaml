swagger: "2.0"
info:
  description: "This is the (unofficial) CircleCI V2 API for managing CircleCI resources."
  version: "1.0.0"
  title: "CircleCI V2 API"
host: "circleci.com"
basePath: "/api/v2"
schemes:
- "https"
securityDefinitions:
  api_token:
    type: "apiKey"
    name: "Circle-Token"
    in: "header"
security:
  - api_token: []

paths:
  /project/{project-slug}:
    get:
      tags:
      - "project"
      summary: "Get a project"
      description: ""
      operationId: "GetProject"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      responses:
        "200":
          description: "Project information"
          schema:
            $ref: "#/definitions/ProjectInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /project/{project-slug}/checkout-key:
    post:
      tags:
      - "project"
      - "checkout key"
      summary: "Create a project checkout key"
      description: ""
      operationId: "AddProjectCheckoutKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "checkout key information (payload)"
        required: true
        schema:
          $ref: "#/definitions/ProjectCheckoutKeyPayload"
      responses:
        "201":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/ProjectCheckoutKeyInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    get:
      tags:
      - "project"
      - "checkout key"
      summary: "List checkout keys"
      description: "Returns all checkout keys for this project."
      operationId: "ListProjectCheckoutKeys"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - name: "page-token"
        in: "query"
        description: "A token to retrieve the next page of results."
        required: true
        type: "string"
      responses:
        "200":
          description: "A sequence of project checkout keys"
          schema:
            $ref: "#/definitions/ProjectCheckoutKeysInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /project/{project-slug}/checkout-key/{fingerprint}:
    get:
      tags:
      - "project"
      - "checkout key"
      summary: "List project checkout keys"
      description: "Returns all checkout keys for this project."
      operationId: "GetProjectCheckoutKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - name: "fingerprint"
        in: "path"
        description: "An SSH key fingerprint"
        required: true
        type: "string"
      responses:
        "200":
          description: "A project's checkout key"
          schema:
            $ref: "#/definitions/ProjectCheckoutKeyInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    delete:
      tags:
      - "project"
      - "checkout key"
      summary: "Delete a project checkout key"
      description: ""
      operationId: "DeleteProjectCheckoutKey"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - name: "fingerprint"
        in: "path"
        description: "An SSH key fingerprint"
        required: true
        type: "string"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Deleted"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /project/{project-slug}/schedule:
    post:
      tags:
      - "schedule"
      summary: "Create a schedule"
      description: ""
      operationId: "AddSchedule"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Schedule information (payload)"
        required: true
        schema:
          $ref: "#/definitions/SchedulePayload"
      responses:
        "201":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/ScheduleInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    get:
      tags:
      - "schedule"
      summary: "List schedules"
      description: "Returns all schedules for this project."
      operationId: "ListSchedules"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - name: "page-token"
        in: "query"
        description: "A token to retrieve the next page of results."
        required: true
        type: "string"
        default: "project"
      responses:
        "200":
          description: "A sequence of schedules"
          schema:
            $ref: "#/definitions/SchedulesInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /schedule/{id}:
    get:
      tags:
      - "schedule"
      summary: "Get a schedule"
      description: "Get a schedule by ID."
      operationId: "GetSchedule"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "The unique ID of the schedule."
      responses:
        "200":
          description: "A schedule object"
          schema:
            $ref: "#/definitions/ScheduleInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    patch:
      tags:
      - "schedule"
      summary: "Update a schedule"
      description: "Updates a schedule and returns the updatd schedule."
      operationId: "UpdateSchedule"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "The unique ID of the schedule."
      - in: "body"
        name: "body"
        description: "Schedule information (payload)"
        required: true
        schema:
          $ref: "#/definitions/SchedulePayload"
      responses:
        "200":
          description: "A schedule object"
          schema:
            $ref: "#/definitions/ScheduleInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    delete:
      tags:
      - "schedule"
      summary: "Delete a schedule"
      description: "Delete a schedule by ID."
      operationId: "DeleteSchedule"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "The unique ID of the schedule."
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Deleted"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /webhook:
    post:
      tags:
      - "webhook"
      summary: "Add a new webhook"
      description: ""
      operationId: "AddWebhook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Webhook information (payload)"
        required: true
        schema:
          $ref: "#/definitions/WebhookPayloadForRequest"
      responses:
        "201":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/WebhookInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    get:
      tags:
      - "webhook"
      summary: "List webhooks"
      description: "Get a list of webhook that match the given scope-type and scope-id"
      operationId: "ListWebhooks"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "scope-id"
        in: "query"
        description: "ID of the scope being used (at the moment, only project ID is supported)"
        required: true
        type: "string"
        format: "uuid"
      - name: "scope-type"
        in: "query"
        description: "Type of the scope being used"
        required: true
        type: "string"
        default: "project"
      responses:
        "200":
          description: "A list of webhooks"
          schema:
            $ref: "#/definitions/WebhooksInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /webhook/{id}:
    get:
      tags:
      - "webhook"
      summary: "Get a webhook"
      description: "Get a webhook by id"
      operationId: "GetWebhook"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "ID of the webhook"
      responses:
        "200":
          description: "A webhook"
          schema:
            $ref: "#/definitions/WebhookInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    put:
      tags:
      - "webhook"
      summary: "Update a webhook"
      description: ""
      operationId: "UpdateWebhook"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "ID of the webhook"
      - in: "body"
        name: "body"
        description: "Webhook information (payload)"
        required: true
        schema:
          $ref: "#/definitions/WebhookPayloadForRequest"
      responses:
        "200":
          description: "A webhook"
          schema:
            $ref: "#/definitions/WebhookInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    delete:
      tags:
      - "webhook"
      summary: "Delete a webhook"
      description: ""
      operationId: "DeleteWebhook"
      consumes:
      - "application/json"
      produces:
      - "application/json"      
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "ID of the webhook"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Deleted"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /project/{project-slug}/envvar:
    post:
      tags:
      - "project"
      - "envvar"
      summary: "Create a project environment variable"
      description: ""
      operationId: "AddProjectEnvVar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Environment variable information (payload)"
        required: true
        schema:
          $ref: "#/definitions/ProjectEnvVarPayload"
      responses:
        "201":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/ProjectEnvVarInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    get:
      tags:
      - "project"
      - "envvar"
      summary: "List project environment variables"
      description: "Returns all environment variables for this project."
      operationId: "ListProjectEnvVars"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - name: "page-token"
        in: "query"
        description: "A token to retrieve the next page of results."
        required: true
        type: "string"
        default: "project"
      responses:
        "200":
          description: "A sequence of project environment variables"
          schema:
            $ref: "#/definitions/ProjectEnvVarsInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /project/{project-slug}/envvar/{name}:
    get:
      tags:
      - "project"
      - "envvar"
      summary: "Get project environment variable"
      description: "Returns a environment variable for this project."
      operationId: "GetProjectEnvVar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "The name of the environment variable."
        required: true
        type: "string"
      responses:
        "200":
          description: "A project environment variable."
          schema:
            $ref: "#/definitions/ProjectEnvVarInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    delete:
      tags:
      - "project"
      - "envvar"
      summary: "Delete a project environment variable"
      description: ""
      operationId: "DeleteProjectEnvVar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "project-slug"
        in: "path"
        description: |
          Project slug in the form vcs-slug/org-name/repo-name.
          The / characters may be URL-escaped.
          Example: gh/CircleCI-Public/api-preview-docs
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "The name of the environment variable."
        required: true
        type: "string"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Deleted"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /context:
    post:
      tags:
      - "contexts"
      summary: "Create a context"
      description: ""
      operationId: "AddContext"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Context information (payload)"
        required: true
        schema:
          $ref: "#/definitions/ContextPayload"
      responses:
        "200":
          description: "Successfully added"
          schema:
            $ref: "#/definitions/ContextInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    get:
      tags:
      - "contexts"
      summary: "List contexts for an owner"
      description: "Returns all contexts for this owner."
      operationId: "ListContexts"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "owner-id"
        in: "query"
        description: "The unique ID of the owner of the context. Specify either this or owner-slug."
        type: "string"
        format: "uuid"
      - name: "owner-slug"
        in: "query"
        description: "A string that represents an organization. Specify either this or owner-id. Cannot be used for accounts."
        type: "string"
      - name: "owner-type"
        in: "query"
        description: "The type of the owner. Defaults to `organization`. Accounts are only used as context owners in server."
        required: true
        type: "string"
        enum:
          - "account"
          - "organization"
        default: "organization"
      - name: "page-token"
        in: "query"
        description: "A token to retrieve the next page of results"
        type: "string"
      responses:
        "200":
          description: "A list of contexts"
          schema:
            $ref: "#/definitions/ContextsInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /context/{id}:
    get:
      tags:
      - "contexts"
      summary: "Get a context"
      description: "Get a context by ID."
      operationId: "GetContext"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "The unique ID of the context."
      responses:
        "200":
          description: "A context object"
          schema:
            $ref: "#/definitions/ContextInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    delete:
      tags:
      - "contexts"
      summary: "Delete a context"
      description: ""
      operationId: "DeleteContext"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "ID of the context"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Deleted"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /context/{id}/environment-variable:
    get:
      tags:
      - "contexts"
      - "envvar"
      summary: "List environment variables for a context"
      description: "Returns all environment variables for a context."
      operationId: "ListContextEnvVars"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "ID of the context"
        type: "string"
        format: "uuid"
        required: true
      - name: "page-token"
        in: "query"
        description: "A token to retrieve the next page of results"
        type: "string"
      responses:
        "200":
          description: "A list of context environment variables"
          schema:
            $ref: "#/definitions/ContextEnvVarsInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
  /context/{id}/environment-variable/{name}:
    delete:
      tags:
      - "contexts"
      - "envvar"
      summary: "Delete a context environment variable"
      description: ""
      operationId: "DeleteContextEnvVar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "ID of the context"
      - name: "name"
        in: "path"
        type: "string"
        required: true
        description: "The name of the environment variable"
      responses:
        "200":
          description: ""
          schema:
            $ref: "#/definitions/Deleted"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
    put:
      tags:
      - "contexts"
      - "envvar"
      summary: "Add or update a context environment variable"
      description: ""
      operationId: "UpdateContextEnvVar"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        type: "string"
        format: "uuid"
        required: true
        description: "ID of the context"
      - name: "name"
        in: "path"
        type: "string"
        required: true
        description: "The name of the environment variable"
      - in: "body"
        name: "body"
        description: "Environment variable information (payload)"
        required: true
        schema:
          $ref: "#/definitions/ContextEnvVarPayload"
      responses:
        "200":
          description: "The new context environment variable"
          schema:
            $ref: "#/definitions/ContextEnvVarInfo"
        "400":
          description: "Invalid input"
          schema:
            $ref: "#/definitions/Errored"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/Errored"
definitions:
  ProjectInfo:
    type: "object"
    properties: 
      slug:
        type: "string"
        description: "Project slug in the form vcs-slug/org-name/repo-name. The / characters may be URL-escaped."
        example: "github/acme/foobar"
      name:
        type: "string"
        description: "The name of the project"
        example: "Foobar"
      id:
        type: "string"
        format: "uuid"
        description: "The unique identifer for the project"
        example: "c124cca6-d03e-4733-b84d-32b02347b78c"
      organization_name:
        type: "string"
        description: "The name of the organization the project belongs to"
      organization_slug:
        type: "string"
        description: "The slug of the organization the project belongs to"
      organization_id:
        type: "string"
        format: "uuid"
        description: "The identifier of the organization the project belongs to"
      vcs_info:
        type: "object"
        description: "Information about the VCS that hosts the project source code"
        properties: 
          vcs_url:
            type: "string"
            format: "url"
            description: "URL to the repository hosting the project's code"
            example: "https://github.com/acmeorg/foobar"
          provider:
            type: "string"
            enum:
              - Bitbucket
              - GitHub
              - CircleCI
            description: "The VCS provider"
          default_branch:
            type: "string"
            description: "Name of the default branch for the project"
            example: "main"
  ProjectCheckoutKeyPayload:
    type: "object"
    properties: 
      type:
        type: "string"
        enum:
          - "user-key"
          - "deploy-key"
        example: "deploy-key"
  ProjectCheckoutKeyInfo:
    type: "object"
    properties: 
      public_key:
        type: string
        description: "A public SSH key"
      fingerprint:
        type: string
        description: "An SSH key fingerprint"
      preferred:
        type: boolean
        description: "A boolean value that indicates if this key is preferred."
        example: true
        x-nullable: true
      type:
        type: "string"
        enum:
          - "github-user-key"
          - "deploy-key"
        example: "deploy-key"
      created_at:
        type: "string"
        format: "date-time"
        description: "The date and time the webhook was created"
        example: "2023-02-10T04:49:36.117Z"
  ProjectCheckoutKeysInfo:
    type: "object"
    properties: 
      items:
        type: "array"
        items:
          $ref: '#/definitions/ProjectCheckoutKeyInfo'  
      next_page_token:
        type: "string"
        example: ""
  WebhookBasePayload:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the webhook"
        example: "test1"
      url:
        type: "string"
        format: "url"
        description: "URL to deliver the webhook to. Note: protocol must be included as well (only https is supported)"
        example: "https://example.com/hook"
      events:
        type: "array"
        description: "Events that will trigger the webhook"
        items:
          type: "string"
          enum:
            - "workflow-completed"
            - "job-completed"
        example: ["workflow-completed"]
      scope:
        type: "object"
        description: "The scope in which the relevant events that will trigger webhooks"
        properties:
          id:
            type: "string"
            format: "uuid"
            description: "ID of the scope being used (at the moment, only project ID is supported)"
            example: "c124cca6-d03e-4733-b84d-32b02347b78c"
          type:
            type: "string"
            default: "project"
            description: "Type of the scope being used"
            example: "project"
  WebhookPayloadForRequest:
    allOf:
      - $ref: '#/definitions/WebhookBasePayload'
      - type: "object"
        properties:
          verify-tls:
            type: "boolean"
            description: "Whether to enforce TLS certificate verification when delivering the webhook"
            example: true
            x-nullable: true
          signing-secret:
            type: "string"
            format: "secret"
            description: "Secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
            example: "****"
  WebhookPayloadForResponse:
    allOf:
      - $ref: '#/definitions/WebhookBasePayload'
      - type: "object"
        properties:
          verify_tls:
            type: "boolean"
            description: "Whether to enforce TLS certificate verification when delivering the webhook"
            example: true
            x-nullable: true
          signing_secret:
            type: "string"
            format: "secret"
            description: "Secret used to build an HMAC hash of the payload and passed as a header in the webhook request"
            example: "****"
  WebhookInfo:
    allOf:
    - $ref: '#/definitions/WebhookPayloadForResponse'
    - type: "object"
      properties: 
        id:
          type: "string"
          format: "uuid"
          description: "The unique ID of the webhook"
          example: "d57ecc67-7a3b-4fd9-a1b4-442d4703bb8d"
        created_at:
          type: "string"
          format: "date-time"
          description: "The date and time the webhook was created"
          example: "2023-02-10T04:49:36.117Z"
        updated_at:
          type: "string"
          format: "date-time"
          description: "The date and time the webhook was last updated"
          example: "2023-02-10T04:49:36.117Z"
  WebhooksInfo:
    type: "object"
    properties: 
      items:
        type: "array"
        items:
          $ref: '#/definitions/WebhookInfo'  
      next_page_token:
        type: "string"
        example: ""
  HourOfADay:
    type: integer
    minimum: 0
    maximum: 24
    exclusiveMaximum: true
  DayOfAWeek:
    type: string
    enum:
      - MON
      - TUE
      - WED
      - THU
      - FRI
      - SAT
      - SUN
  DayOfAMonth:
    type: integer
    minimum: 1
    maximum: 31
  Month:
    type: string
    enum:
      - JAN
      - FEB
      - MAR
      - APR
      - MAY
      - JUN
      - JUL
      - AUG
      - SEP
      - OCT
      - NOV
      - DEC
  User:
    type: object
    required:
      - id
      - login
      - name
    properties: 
      id:
        type: string
        format: "uuid"
        description: "The unique ID of the user."
      login:
        type: string
        description: "The login information for the user."
      name:
        type: string
        description: "The name of the user."
  ScheduleBaseData:
    type: object
    properties: 
      name:
        type: "string"
        description: "Name of the schedule."
      description:
        type: "string"
        format: "secret"
        description: "Description of the schedule."
      parameters:
        type: "object"
        description: "Pipeline parameters represented as key-value pairs. Must contain branch or tag."
        properties:
          branch:
            type: "string"
          tag:
            type: "string"
        additionalProperties:
          type: object
      timetable:
        type: "object"
        description: "Timetable that specifies when a schedule triggers."
        required:
          - per-hour
          - hours-of-day
        properties:
          per-hour:
            type: integer
            minimum: 1
            maximum: 60
            description: "Number of times a schedule triggers per hour, value must be between 1 and 60."
          hours-of-day:
            type: array
            description: "Hours in a day in which the schedule triggers."
            items:
              $ref: "#/definitions/HourOfADay"
          days-of-week:
            type: array
            description: "Days in a week in which the schedule triggers."
            items:
              $ref: "#/definitions/DayOfAWeek"
          days-of-month:
            type: array
            description: "Days in a month in which the schedule triggers. This is mutually exclusive with days in a week."
            items:
              $ref: "#/definitions/DayOfAMonth"
          months:
            type: array
            description: "Months in which the schedule triggers."
            items:
              $ref: "#/definitions/Month"
  SchedulePayload:
    allOf:
      - $ref: "#/definitions/ScheduleBaseData"
      - type: object
        properties: 
          attribution-actor:
            type: "string"
            enum:
              - current
              - system
            description: "The attribution-actor of the scheduled pipeline."
  ScheduleInfo:
    allOf:
      - $ref: "#/definitions/ScheduleBaseData"
      - type: object
        required:
          - id
          - created-at
          - updated-at
          - actor
          - project-slug
        properties: 
          id:
            type: "string"
            format: "uuid"
            description: "The unique ID of the schedule."
          created-at:
            type: "string"
            format: "date-time"
            description: "The date and time the schedule was created."
          updated-at:
            type: "string"
            format: "date-time"
            description: "The date and time the schedule was last updated."
          actor:
            $ref: "#/definitions/User"
          project-slug:
            type: string
            description: "The project-slug for the schedule."
  SchedulesInfo:
    type: "object"
    properties: 
      items:
        type: "array"
        items:
          $ref: '#/definitions/ScheduleInfo'  
      next_page_token:
        type: "string"
  ProjectEnvVarPayload:
    type: "object"
    required:
      - name
      - value
    properties:
      name:
        type: "string"
        description: "The name of the environment variable."
      value:
        type: "string"
        description: "The value of the environment variable."
  ProjectEnvVarInfo:
    allOf:
      - $ref: "#/definitions/ProjectEnvVarPayload"
  ProjectEnvVarsInfo:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: '#/definitions/ProjectEnvVarInfo'
      next_page_token:
        type: "string"
        example: ""
  ContextInfo:
    type: "object"
    properties:
      id:
        type: string
        format: "uuid"
        description: "The unique ID of the context."
      name:
        type: string
        description: "The user-defined name of the context"
      created_at:
        type: "string"
        format: "date-time"
        description: "The date and time the context was created"
        example: "2023-02-10T04:49:36.117Z"
  ContextsInfo:
    type: "object"
    properties:
      items:
        type: "array"
        items:
          $ref: '#/definitions/ContextInfo'
      next_page_token:
        type: "string"
        example: ""
  ContextPayload:
    type: "object"
    required:
      - name
      - owner
    properties:
      name:
        type: "string"
        description: "The user-defined name of the context."
      owner:
        type: "object"
        required:
          - id
          - type
        properties:
          id:
            type: "string"
            format: "uuid"
            description: "The unique identifier name of the owner of the context."
          type:
            type: "string"
            description: "The type of the owner. Defaults to `organization`. Accounts are only used as context owners in server."
            enum:
              - "account"
              - "organization"
  ContextEnvVarInfo:
    type: "object"
    properties: 
      variable:
        type: "string"
        description: "The name of the environment variable"
      created_at:
        type: "string"
        format: "date-time"
        description: "The date and time the environment variable was created"
        example: "2023-02-10T04:49:36.117Z"
      updated_at:
        type: "string"
        format: "date-time"
        description: "The date and time the environment variable was last updated"
        example: "2023-02-10T04:49:36.117Z"
      context_id:
        type: "string"
        format: "uuid"
        description: "ID of the context"
  ContextEnvVarsInfo:
    type: "object"
    properties: 
      items:
        type: "array"
        items:
          $ref: '#/definitions/ContextEnvVarInfo'  
      next_page_token:
        type: "string"
        example: ""
  ContextEnvVarPayload:
    type: "object"
    required:
      - value
    properties:
      value:
        type: "string"
        description: "The value of the environment variable."
  Deleted:
    type: "object"
    properties: 
      message:
        type: "string"
        description: "A human-readable message"
  Errored:
    type: "object"
    properties: 
      message:
        type: "string"
        description: "Error message" 
externalDocs:
  description: "Find official API document for CircleCI here"
  url: "https://circleci.com/docs/api/v2/index.html#tag/Webhook"